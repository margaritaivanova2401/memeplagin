const vscode = require('vscode');
const cp = require('child_process');
const path = require('path');

function activate(context) {
  console.log('Happy Compiler: activate');

  let disposable =
      vscode.commands.registerCommand('happy-compiler.run', async () => {
        const editor = vscode.window.activeTextEditor;
        if (!editor) {
          vscode.window.showErrorMessage('–û—Ç–∫—Ä–æ–π —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π!');
          return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∫–æ–º–ø–∏–ª—è—Ü–∏–µ–π
        const saved = await editor.document.save();
        if (!saved) {
          vscode.window.showErrorMessage('–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∫–æ–º–ø–∏–ª—è—Ü–∏–µ–π!');
          return;
        }

        const filePath = editor.document.fileName;
        const outPath = filePath + '.out';

        // –í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        let compiler = 'gcc';
        if (filePath.endsWith('.cpp') || filePath.endsWith('.cc') ||
            filePath.endsWith('.cxx'))
          compiler = 'g++';

        // –ü–æ–ª–Ω—ã–π –∫–æ–º–∞–Ω–¥–Ω—ã–π –≤—ã–∑–æ–≤: -w –ø–æ–¥–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–æ–ø—Ü–∏—è –ø—Ä–∏
        // –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        const cmd = `${compiler} -w "${filePath}" -o "${outPath}"`;

        console.log('Running compile command:', cmd);

        // –°–æ–∑–¥–∞—ë–º Webview (–ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏)
        const panel = vscode.window.createWebviewPanel(
            'happyCompiler', 'Happy Compiler', vscode.ViewColumn.One, {
              enableScripts: true,
              localResourceRoots:
                  [vscode.Uri.joinPath(context.extensionUri, 'media')]
            });

        // –ü—É—Ç–∏ –∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º
        const happyImg = panel.webview.asWebviewUri(
            vscode.Uri.joinPath(context.extensionUri, 'media', 'happy.png'));
        const sadImg = panel.webview.asWebviewUri(
            vscode.Uri.joinPath(context.extensionUri, 'media', 'sad.png'));

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é; stderr/stdout –ø–æ–ø–∞–¥—ë—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ callback'–∞
        cp.exec(cmd, {timeout: 20000}, (err, stdout, stderr) => {
          console.log('Compile callback. err:', err);
          console.log('stdout:', stdout);
          console.log('stderr:', stderr);

          // err !== null –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–Ω—É–ª–µ–≤–æ–π –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ (–æ—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∏–ª–∏
          // –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω)
          if (err) {
            // –ï—Å–ª–∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—É–¥–µ—Ç ENOENT
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É—Å—Ç–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            panel.webview.html = makeHtml(sadImg, 'üò¢ –ö–æ–º–ø–∏–ª—è—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
          } else {
            panel.webview.html = makeHtml(happyImg, 'üéâ –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
          }
        });
      });

  context.subscriptions.push(disposable);
}

function makeHtml(imgUri, caption) {
  return `<!doctype html>
    <html>
      <head>
        <meta charset="utf-8" />
        <style>
          body { display:flex; flex-direction:column; align-items:center; justify-content:center;
                 font-family: sans-serif; padding:20px; background:#fff; color:#222; }
          h1 { margin: 0 0 10px 0; }
          img { max-width: 420px; max-height: 420px; border-radius:12px; box-shadow:0 8px 24px rgba(0,0,0,0.2); }
        </style>
      </head>
      <body>
        <h1>${caption}</h1>
        <img src="${imgUri}" alt="${caption}" />
      </body>
    </html>`;
}

function deactivate() {}

module.exports = {
  activate,
  deactivate
};
